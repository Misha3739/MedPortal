// <auto-generated />
using System;
using MedPortal.Data.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MedPortal.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190526110111_LogMigration")]
    partial class LogMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MedPortal.Data.DTO.HCity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .HasMaxLength(100);

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("OriginId");

                    b.HasKey("Id");

                    b.HasIndex("OriginId")
                        .IsUnique();

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("MedPortal.Data.DTO.HClinic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<long>("HCityId");

                    b.Property<long?>("HDistrictId");

                    b.Property<long>("HStreetId");

                    b.Property<string>("House");

                    b.Property<bool>("IsActive");

                    b.Property<double>("Latitude");

                    b.Property<string>("Logo");

                    b.Property<double>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("OnlineRecordDoctor");

                    b.Property<long>("OriginId");

                    b.Property<long?>("ParentId");

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<string>("RewriteName")
                        .HasMaxLength(200);

                    b.Property<string>("ShortName")
                        .HasMaxLength(200);

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("HCityId");

                    b.HasIndex("HDistrictId");

                    b.HasIndex("HStreetId");

                    b.HasIndex("OriginId")
                        .IsUnique();

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("MedPortal.Data.DTO.HClinicDoctors", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClinicId");

                    b.Property<long>("DoctorId");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DoctorId");

                    b.ToTable("ClinicDoctors");
                });

            modelBuilder.Entity("MedPortal.Data.DTO.HClinicStations", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClinicId");

                    b.Property<long>("StationId");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("StationId");

                    b.ToTable("ClinicStations");
                });

            modelBuilder.Entity("MedPortal.Data.DTO.HDistrict", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .HasMaxLength(100);

                    b.Property<long>("CityId");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("OriginId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("OriginId")
                        .IsUnique();

                    b.ToTable("Districs");
                });

            modelBuilder.Entity("MedPortal.Data.DTO.HDistrictStations", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DistrictId");

                    b.Property<long>("StationId");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("StationId");

                    b.ToTable("DistrictStations");
                });

            modelBuilder.Entity("MedPortal.Data.DTO.HDoctor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddPhoneNumber");

                    b.Property<string>("Alias")
                        .HasMaxLength(100);

                    b.Property<string>("Category");

                    b.Property<string>("Degree");

                    b.Property<long>("Departure");

                    b.Property<string>("Description");

                    b.Property<long>("ExperienceYear");

                    b.Property<string>("Img");

                    b.Property<string>("ImgFormat");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsExclusivePrice");

                    b.Property<long>("KidsReception");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("OpinionCount");

                    b.Property<long>("OriginId");

                    b.Property<long>("Price");

                    b.Property<string>("Rank");

                    b.Property<string>("Rating");

                    b.Property<string>("RatingReviewsLabel");

                    b.Property<int>("Sex");

                    b.Property<long?>("SpecialPrice");

                    b.Property<long?>("TelemedId");

                    b.Property<string>("TextAbout");

                    b.Property<string>("TextCourse");

                    b.Property<string>("TextDegree");

                    b.Property<string>("TextEducation");

                    b.Property<string>("TextExperience");

                    b.Property<string>("TextSpec");

                    b.HasKey("Id");

                    b.HasIndex("OriginId")
                        .IsUnique();

                    b.HasIndex("TelemedId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("MedPortal.Data.DTO.HDoctorSpecialities", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DoctorId");

                    b.Property<long>("SpecialityId");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("DoctorSpecialities");
                });

            modelBuilder.Entity("MedPortal.Data.DTO.HSpeciality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("OriginId");

                    b.HasKey("Id");

                    b.HasIndex("OriginId")
                        .IsUnique();

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("MedPortal.Data.DTO.HStation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .HasMaxLength(100);

                    b.Property<long>("CityId");

                    b.Property<double>("Latitude");

                    b.Property<string>("LineColor")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<string>("LineName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<double>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("OriginId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("OriginId")
                        .IsUnique();

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("MedPortal.Data.DTO.HStreet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .HasMaxLength(100);

                    b.Property<long>("CityId");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("OriginId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("OriginId")
                        .IsUnique();

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("MedPortal.Data.DTO.HTelemed", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Chat");

                    b.Property<long>("HClinicId");

                    b.Property<long>("OriginId");

                    b.Property<bool>("Phone");

                    b.HasKey("Id");

                    b.HasIndex("HClinicId");

                    b.HasIndex("OriginId")
                        .IsUnique();

                    b.ToTable("Telemeds");
                });

            modelBuilder.Entity("MedPortal.Data.DTO.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExceptionInformation");

                    b.Property<DateTime>("IncomeTime");

                    b.Property<string>("Ip")
                        .HasMaxLength(50);

                    b.Property<DateTime>("OutcomeTime");

                    b.Property<string>("RequestBody");

                    b.Property<string>("RequestedUrl")
                        .HasMaxLength(200);

                    b.Property<int>("StatusCode");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("MedPortal.Data.DTO.HClinic", b =>
                {
                    b.HasOne("MedPortal.Data.DTO.HCity", "HCity")
                        .WithMany()
                        .HasForeignKey("HCityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MedPortal.Data.DTO.HDistrict", "HDistrict")
                        .WithMany()
                        .HasForeignKey("HDistrictId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MedPortal.Data.DTO.HStreet", "HStreet")
                        .WithMany()
                        .HasForeignKey("HStreetId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MedPortal.Data.DTO.HClinicDoctors", b =>
                {
                    b.HasOne("MedPortal.Data.DTO.HClinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MedPortal.Data.DTO.HDoctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MedPortal.Data.DTO.HClinicStations", b =>
                {
                    b.HasOne("MedPortal.Data.DTO.HClinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MedPortal.Data.DTO.HStation", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MedPortal.Data.DTO.HDistrict", b =>
                {
                    b.HasOne("MedPortal.Data.DTO.HCity", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MedPortal.Data.DTO.HDistrictStations", b =>
                {
                    b.HasOne("MedPortal.Data.DTO.HDistrict", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MedPortal.Data.DTO.HStation", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MedPortal.Data.DTO.HDoctor", b =>
                {
                    b.HasOne("MedPortal.Data.DTO.HTelemed", "Telemed")
                        .WithMany()
                        .HasForeignKey("TelemedId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MedPortal.Data.DTO.HDoctorSpecialities", b =>
                {
                    b.HasOne("MedPortal.Data.DTO.HDoctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MedPortal.Data.DTO.HSpeciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MedPortal.Data.DTO.HStation", b =>
                {
                    b.HasOne("MedPortal.Data.DTO.HCity", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MedPortal.Data.DTO.HStreet", b =>
                {
                    b.HasOne("MedPortal.Data.DTO.HCity", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MedPortal.Data.DTO.HTelemed", b =>
                {
                    b.HasOne("MedPortal.Data.DTO.HClinic", "HClinic")
                        .WithMany()
                        .HasForeignKey("HClinicId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
